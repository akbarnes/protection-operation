
using PowerModelsProtection: PowerModelsDistribution
using PowerModelsProtection, Ipopt, JuMP, Printf
include("relays.jl")
include("cts.jl")
include("helper_functions.jl")
include("operation.jl")

#net = PowerModelsProtection.parse_file("case3_balanced_pv_2_grid_forming.dss")
net = PowerModelsProtection.parse_file("case3_unbalanced.dss")
net["multinetwork"] = false
solver = JuMP.with_optimizer(Ipopt.Optimizer)

# Simulate the fault
net["fault"] = Dict{String, Any}()


results = PowerModelsProtection.solve_mc_fault_study(net, solver)

# # Print out the fault currents
# Iabc = results["solution"]["line"]["ohline"]["fault_current"]
# @printf("Fault current: %0.3f A\n", Iabc[1])

#add relays and cts
#going to test 4 relays. 2 on ohline, 2 on quad, with on with a ct on each to compare
#also test wrong elements, ids, etc
@printf("\n")
@printf("\n")
@printf("\n")
@printf("---------------------------------\n")
@printf("\n")
@printf("\n")
@printf("\n")

@printf("Test adding relays and CTs to line that DNE:\n")
add_ct(net,"fake_line","CT1",500,5)
add_relay(net,"fake_line","R1",5,0.5)
@printf("\n")
@printf("Test adding relay with CT that DNE:\n")
add_relay(net,"ohline","R1",5,0.5,"CT1")
@printf("\n")
@printf("Adding 1 overcurrent relay to ohline with+without CT, differential to primary and quad,\n")
@printf("and a directional differential on ohline/ohline2.\n")
add_ct(net,"ohline","CT1",500,5)
add_ct(net,"ohline2","CT2",500,5)
add_ct(net,"quad","CT3",500,5)
add_relay(net,"ohline","R1",380, 0.5)
add_relay(net,"ohline","R2",1,0.5,"CT1",shots=4)
add_relay(net,"primary","R1",1,0.5,["CT1","CT2"])
add_relay(net,"ohline","ohline2","R4",5,0.5,["CT1","CT2"])
add_relay(net,"quad","R1",1,0.5,["CT3"])
add_relay(net,"ohline","ohline2","R3",4)
@printf("\n")
@printf("Test redefining a ct and relay:\n")
add_ct(net,"ohline2","CT2",1900,5)
add_relay(net,"ohline","R1",380, 0.5)
@printf("\n")
@printf("Running report. No fault is present, so no relays should trip(nothing gets printed).\n")
@printf("However, CTs are not sized correctly, so relay on primary bus as well as differential relay\n")
@printf("on ohline/ohline2 trips due to the through current:\n")
relay_operation_all(net,results)
relay_report(net)
@printf("\n")
@printf("Redefine CTs with correct turns ratio.\n")
add_ct(net,"ohline","CT1",1900,5)
add_relay(net,"primary","R1",1,0.5,["CT1","CT2"])
@printf("\n")
@printf("Run report, nothing should trip now:\n")
relay_operation_all(net,results)
relay_report(net)
@printf("\n")

@printf("Adding SLG phase 1 fault to primary2:\n")
@printf("\n")
@printf("\n")
@printf("\n")
PowerModelsProtection.add_fault!(net, "1", "lg", "primary2", [1,4], 0.005)
results = PowerModelsProtection.solve_mc_fault_study(net, solver)
@printf("\n")
@printf("\n")
@printf("\n")
@printf("---------------------------------\n")
@printf("\n")
@printf("\n")
@printf("\n")
@printf("Both overcurrent relays on ohline should trip with the same operating times because the CT is matched for the line\n")
@printf("R2 should also close 3 times and open 4 so there are 4 different operating times:\n")
relay_operation_all(net,results)
relay_report(net)
@printf("\n")
@printf("Now adding fault to primary\n")
@printf("\n")
@printf("\n")
@printf("\n")
PowerModelsProtection.add_fault!(net, "1", "lg", "primary", [1,4], 0.005)
results = PowerModelsProtection.solve_mc_fault_study(net, solver)
@printf("\n")
@printf("\n")
@printf("\n")
@printf("---------------------------------\n")
@printf("\n")
@printf("\n")
@printf("\n")
@printf("Now, differential on primary should trip, as well as the directional relay because\n")
@printf("the direction of current through those lines do not match\n")
@printf("Differential relay on quad will never trip because a fault cannot be placed on a line\n")
relay_operation_all(net,results)
relay_report(net)

